#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#Racine carre de la variance

import functions
import math

a, b = functions.parsing();
list_conjointe = []
list_loi_de_y = []
list_loi_de_x = []
list_loi_de_z = []

print("\t\tX=10\tX=20\tX=30\tX=40\tX=50\tloi de Y")

Y = 10
i = 0
while Y <= 50:
    functions.Y_law(Y, i, list_conjointe, a, b, list_loi_de_y)
    i += 5 
    Y += 10

print "loi de X\t",

i = 0
while i < 5:
    functions.X_law(i, list_conjointe, list_loi_de_x)
    i += 1
print "1"

print "z\t\t20\t30\t40\t50\t60\t70\t80\t90\t100\ttotal"
print "p(Z=z)\t\t",
functions.Z_law(list_loi_de_z, list_conjointe)

print "\nesperance de X:\t\t\t\t",
esperance_x = functions.esperance(list_loi_de_x)

esperance_pow_x = functions.esperance_pow(list_loi_de_x)
print "variance de X:\t\t\t\t", 
print(round(esperance_pow_x - (pow(esperance_x, 2)), 3))
print "Racine carre de la variance de X:\t", 
print round(math.sqrt((esperance_pow_x - (pow(esperance_x, 2)))), 3)

print "esperance de Y:\t\t\t\t",
esperance_y = functions.esperance(list_loi_de_y)
esperance_pow_y = functions.esperance_pow(list_loi_de_y)
print "variance de Y:\t\t\t\t", 
print(round(esperance_pow_y - (pow(esperance_y, 2)), 3))
print "Racine carre de la variance de Y:\t", 
print round(math.sqrt((esperance_pow_y - (pow(esperance_y, 2)))), 3)

print "esperance de Z:\t\t\t\t",
esperance_z = functions.esperance_z(list_loi_de_z)
esperance_pow_z = functions.esperance_pow_z(list_loi_de_z)
print "variance de Z:\t\t\t\t", 
print(round(esperance_pow_z - (pow(esperance_z, 2)), 3))
print "Racine carre de la variance de Z:\t", 
print round(math.sqrt((esperance_pow_z - (pow(esperance_z, 2)))), 3)

